/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const LoginLazyImport = createFileRoute('/login')()
const DashboardLazyImport = createFileRoute('/dashboard')()
const CarsLazyImport = createFileRoute('/cars')()
const IndexLazyImport = createFileRoute('/')()
const CarsIndexLazyImport = createFileRoute('/cars/')()

// Create/Update Routes

const LoginLazyRoute = LoginLazyImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const DashboardLazyRoute = DashboardLazyImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/dashboard.lazy').then((d) => d.Route))

const CarsLazyRoute = CarsLazyImport.update({
  id: '/cars',
  path: '/cars',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/cars.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const CarsIndexLazyRoute = CarsIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => CarsLazyRoute,
} as any).lazy(() => import('./routes/cars/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/cars': {
      id: '/cars'
      path: '/cars'
      fullPath: '/cars'
      preLoaderRoute: typeof CarsLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardLazyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/cars/': {
      id: '/cars/'
      path: '/'
      fullPath: '/cars/'
      preLoaderRoute: typeof CarsIndexLazyImport
      parentRoute: typeof CarsLazyImport
    }
  }
}

// Create and export the route tree

interface CarsLazyRouteChildren {
  CarsIndexLazyRoute: typeof CarsIndexLazyRoute
}

const CarsLazyRouteChildren: CarsLazyRouteChildren = {
  CarsIndexLazyRoute: CarsIndexLazyRoute,
}

const CarsLazyRouteWithChildren = CarsLazyRoute._addFileChildren(
  CarsLazyRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/cars': typeof CarsLazyRouteWithChildren
  '/dashboard': typeof DashboardLazyRoute
  '/login': typeof LoginLazyRoute
  '/cars/': typeof CarsIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/dashboard': typeof DashboardLazyRoute
  '/login': typeof LoginLazyRoute
  '/cars': typeof CarsIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/cars': typeof CarsLazyRouteWithChildren
  '/dashboard': typeof DashboardLazyRoute
  '/login': typeof LoginLazyRoute
  '/cars/': typeof CarsIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/cars' | '/dashboard' | '/login' | '/cars/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/dashboard' | '/login' | '/cars'
  id: '__root__' | '/' | '/cars' | '/dashboard' | '/login' | '/cars/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  CarsLazyRoute: typeof CarsLazyRouteWithChildren
  DashboardLazyRoute: typeof DashboardLazyRoute
  LoginLazyRoute: typeof LoginLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  CarsLazyRoute: CarsLazyRouteWithChildren,
  DashboardLazyRoute: DashboardLazyRoute,
  LoginLazyRoute: LoginLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/cars",
        "/dashboard",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.lazy.jsx"
    },
    "/cars": {
      "filePath": "cars.lazy.jsx",
      "children": [
        "/cars/"
      ]
    },
    "/dashboard": {
      "filePath": "dashboard.lazy.jsx"
    },
    "/login": {
      "filePath": "login.lazy.jsx"
    },
    "/cars/": {
      "filePath": "cars/index.lazy.jsx",
      "parent": "/cars"
    }
  }
}
ROUTE_MANIFEST_END */
